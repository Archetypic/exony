# Copyright 2018 Mykola Orliuk <virkony@gmail.com>
# Distributed under the terms of the GNU General Public License v2

SUMMARY="The universal markup converter"
HOMEPAGE="http://pandoc.org"

LICENCES="GPL-2"
SLOT="0"
PLATFORMS="~amd64"
MYOPTIONS=""

DEPENDENCIES="
    build:
        dev-haskell/stack-bin
"

BUGS_TO="virkony@gmail.com"
RESTRICT=test  # no build guarantee - no tests

WORK="$WORKBASE"
STACK_ROOT=/var/cache/stack-build

src_fetch_extra() {
    cd "$TEMP"
    # Ensure we have GHC for latest LTS
    estack setup  # TODO: move to src_compile phase of separete pre-requisite package

    estack build --dry-run --prefetch "${PNV}"
}

src_compile() {
    estack build --interleaved-output "${PNV}"
}

src_install() {
    estack install --local-bin-path "$IMAGE/usr/$(exhost --target)/bin" "${PNV}"
}

estack() {
    local extra_args=( --verbose --no-system-ghc --no-install-ghc --jobs ${EXJOBS:-1} --allow-different-user --no-terminal --color always )
    [[ -n "$IMAGE" ]] && extra_args+=( --local-bin-path "$IMAGE/usr/$(exhost --target)/bin" )

    # GHC use custom handling of toolchain configuration and lazy to switch
    # See https://phabricator.haskell.org/D1356

    # Though they fixed CC/CPP env vars https://ghc.haskell.org/trac/ghc/ticket/11231 they still
    # don't allow AR override or use of target-prefixed tools. Thus we need to create a stub bin
    # folder for that.

    # We may bootstrap GHC during srf_fetch_extra. Thus prepare proper toolchain
    STACK_ROOT=$STACK_ROOT \
        PATH="$(dotoolchaindir $(exhost --target) ar strip):$PATH" \
        CPP="$(exhost --target)-cpp" \
        CC="$(exhost --target)-cc" \
        edo stack "${extra_args[@]}" "$@"
}

dotoolchaindir() {
    # Note that GHC probably will remember this folder. Thus we should keep it after installation.
    local tool target="$1" dir="${STACK_ROOT}/toolchain-$1"
    shift
    edo mkdir -p "$dir"
    for tool in "$@"; do
        [[ -x "$dir/$tool" ]] || edo ln -s "$(which "$target-$tool")" "$dir/$tool"
    done
    echo "$dir"
}

